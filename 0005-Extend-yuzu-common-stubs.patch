From 36d5978d3b29c69e047e622ec06fd49ba2d4a922 Mon Sep 17 00:00:00 2001
From: Billy Laws <blaws05@gmail.com>
Date: Tue, 14 Mar 2023 23:07:41 +0000
Subject: [PATCH 05/12] Extend yuzu common stubs

---
 common/assert.h          |  2 ++
 common/common_funcs.h    |  6 +++++
 common/common_types.h    |  6 +++++
 common/log.h             |  9 +++++---
 common/logging/log.h     |  6 +++++
 common/microprofile.h    |  8 +++++++
 common/polyfill_ranges.h |  4 ++++
 common/settings.h        | 41 +++++++++++++++++++++--------------
 common/thread.h          | 47 ++++++++++++++++++++++++++++++++++++++++
 9 files changed, 110 insertions(+), 19 deletions(-)
 create mode 100644 common/logging/log.h
 create mode 100644 common/microprofile.h
 create mode 100644 common/polyfill_ranges.h
 create mode 100644 common/thread.h

diff --git a/common/assert.h b/common/assert.h
index 9915232..1b94e97 100644
--- a/common/assert.h
+++ b/common/assert.h
@@ -5,6 +5,8 @@
 
 #include <exception>
 
+#define UNREACHABLE() throw std::runtime_error("Unreachable!")
+
 #ifdef NDEBUG
 #define DEBUG_ASSERT(condition)
 #else
diff --git a/common/common_funcs.h b/common/common_funcs.h
index e2b02d2..d58ff13 100644
--- a/common/common_funcs.h
+++ b/common/common_funcs.h
@@ -40,3 +40,9 @@
         using TYPE = std::underlying_type_t<ENUMTYPE>;                             \
         return static_cast<TYPE>(key) == 0;                                        \
     }
+
+namespace Common {
+[[nodiscard]] constexpr u32 MakeMagic(char a, char b, char c, char d) {
+    return u32(a) | u32(b) << 8 | u32(c) << 16 | u32(d) << 24;
+}
+}
\ No newline at end of file
diff --git a/common/common_types.h b/common/common_types.h
index 14acd24..0d61a7a 100644
--- a/common/common_types.h
+++ b/common/common_types.h
@@ -21,3 +21,9 @@ using s8 = __int8_t; //!< Signed 8-bit integer
 
 using f32 = float; //!< 32-bit floating point
 using f64 = double; //!< 64-bit floating point
+
+using u16_le = u16;
+using u32_le = u32;
+using s32_le = s32;
+
+using VAddr = u64;    ///< Represents a pointer in the userspace virtual address space.
diff --git a/common/log.h b/common/log.h
index 53aaf9a..2e28865 100644
--- a/common/log.h
+++ b/common/log.h
@@ -8,10 +8,13 @@
 namespace AudioCore::Log {
     // Proxy logging framework, these functions are implemented by Skyline
     void Debug(const std::string& message);
+    void Info(const std::string& message);
     void Warn(const std::string& message);
     void Error(const std::string& message);
 }
 
-#define LOG_DEBUG(tag, message, ...) AudioCore::Log::Debug(fmt::format("Audio Core (" #tag "): " message __VA_OPT__(,) __VA_ARGS__))
-#define LOG_WARNING(tag, message, ...) AudioCore::Log::Warn(fmt::format("Audio Core (" #tag "): " message __VA_OPT__(,) __VA_ARGS__))
-#define LOG_ERROR(tag, message, ...) AudioCore::Log::Error(fmt::format("Audio Core (" #tag "): " message __VA_OPT__(,) __VA_ARGS__))
+#define LOG_DEBUG(tag, message, ...) ::AudioCore::Log::Debug(fmt::format("Audio Core (" #tag "): " message __VA_OPT__(,) __VA_ARGS__))
+#define LOG_INFO(tag, message, ...) ::AudioCore::Log::Info(fmt::format("Audio Core (" #tag "): " message __VA_OPT__(,) __VA_ARGS__))
+#define LOG_WARNING(tag, message, ...) ::AudioCore::Log::Warn(fmt::format("Audio Core (" #tag "): " message __VA_OPT__(,) __VA_ARGS__))
+#define LOG_ERROR(tag, message, ...) ::AudioCore::Log::Error(fmt::format("Audio Core (" #tag "): " message __VA_OPT__(,) __VA_ARGS__))
+#define LOG_CRITICAL(tag, message, ...) ::AudioCore::Log::Error(fmt::format("Audio Core (" #tag "): " message __VA_OPT__(,) __VA_ARGS__))
diff --git a/common/logging/log.h b/common/logging/log.h
new file mode 100644
index 0000000..f9ccd63
--- /dev/null
+++ b/common/logging/log.h
@@ -0,0 +1,6 @@
+// SPDX-License-Identifier: MPL-2.0
+// Copyright © 2023 Skyline Team and Contributors (https://github.com/skyline-emu/)
+
+#pragma once
+
+#include "../log.h"
diff --git a/common/microprofile.h b/common/microprofile.h
new file mode 100644
index 0000000..3f776d5
--- /dev/null
+++ b/common/microprofile.h
@@ -0,0 +1,8 @@
+// SPDX-License-Identifier: MPL-2.0
+// Copyright © 2023 Skyline Team and Contributors (https://github.com/skyline-emu/)
+
+#pragma once
+
+#define MICROPROFILE_DEFINE(...)
+#define MICROPROFILE_SCOPE(...)
+#define MicroProfileOnThreadCreate(foo) do {} while(0)
diff --git a/common/polyfill_ranges.h b/common/polyfill_ranges.h
new file mode 100644
index 0000000..43b1173
--- /dev/null
+++ b/common/polyfill_ranges.h
@@ -0,0 +1,4 @@
+// SPDX-License-Identifier: MPL-2.0
+// Copyright © 2023 Skyline Team and Contributors (https://github.com/skyline-emu/)
+
+#pragma once
diff --git a/common/settings.h b/common/settings.h
index 0fda6a5..bf836e2 100644
--- a/common/settings.h
+++ b/common/settings.h
@@ -1,25 +1,34 @@
 // SPDX-License-Identifier: MPL-2.0
-// Copyright © 2021 Skyline Team and Contributors (https://github.com/skyline-emu/)
+// Copyright © 2023 Skyline Team and Contributors (https://github.com/skyline-emu/)
 
 #pragma once
 
 #include "common_types.h"
 
-namespace AudioCore {
-    /**
-     * @note Only contains the settings relevant to audio core
-     */
-    struct Values {
-        std::string sink_id;
-        std::string audio_output_device_id;
-        std::string audio_input_device_id;
-        bool dump_audio_commands;
-        u8 volume;
+namespace AudioCore::Settings {
+template<typename T>
+struct Wrapper {
+    T val;
 
-        u8 Volume() const {
-            return volume;
-        }
-    };
+    const T &GetValue() const {
+        return val;
+    }
+};
 
-    static inline Values values{}; //!< A static structure with the values set by Skyline code
+/**
+ * @note Only contains the settings relevant to audio core
+ */
+struct Values {
+    Wrapper<std::string> sink_id{"auto"};
+    Wrapper<std::string> audio_output_device_id{"auto"};
+    Wrapper<std::string> audio_input_device_id{"auto"};
+    bool dump_audio_commands{};
+    u8 volume{100};
+};
+
+static inline Values values{}; //!< A static structure with the values set by Skyline code
+
+static inline float Volume() {
+    return values.volume / static_cast<f32>(200);
+}
 }
diff --git a/common/thread.h b/common/thread.h
new file mode 100644
index 0000000..51ab655
--- /dev/null
+++ b/common/thread.h
@@ -0,0 +1,47 @@
+// SPDX-License-Identifier: MPL-2.0
+// Copyright © 2023 Skyline Team and Contributors (https://github.com/skyline-emu/)
+
+#pragma once
+
+#include <condition_variable>
+#include <mutex>
+
+namespace Common {
+
+class Event {
+public:
+    void Set() {
+        std::scoped_lock lock{mutex};
+        cv.notify_one();
+        set = true;
+    }
+
+    void Wait() {
+        std::unique_lock lk{mutex};
+        cv.wait(lk, [&] { return set.load(); });
+        set = false;
+    }
+
+    void Reset() {
+        std::unique_lock lk{mutex};
+        set = false;
+    }
+private:
+    std::atomic_bool set{};
+    std::condition_variable cv;
+    std::mutex mutex;
+};
+
+enum class ThreadPriority : u32 {
+    Low = 0,
+    Normal = 1,
+    High = 2,
+    VeryHigh = 3,
+    Critical = 4,
+};
+
+inline void SetCurrentThreadPriority(ThreadPriority new_priority) {}
+
+inline void SetCurrentThreadName(const char* name) {}
+
+} // namespace Common
-- 
2.39.0

